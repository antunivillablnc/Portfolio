<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Family Feud</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="nav container">
        <h1>Family Feud Game</h1>
        <ul>
            <li><a href="index.html">Home</a></li>
            <li><a href="intro.html">Intro</a></li>
            <li><a href="rules.html">Rules</a></li>
        </ul>
    </div>


    <div class="game_container" id="gameContainer">
        <h2>Category: Gulay sa Bahay Kubo</h2>
        <ul id="answerList">
            <li data-answer="Sitaw"><span class="answer">Sitaw</span> <span class="points">50</span></li>
            <li data-answer="Patani"><span class="answer">Patani</span> <span class="points">38</span></li>
            <li data-answer="Patola"><span class="answer">Patola</span> <span class="points">20</span></li>
            <li data-answer="Kalabasa"><span class="answer">Kalabasa</span> <span class="points">17</span></li>
        </ul>
    </div>

    <!-- Add the turn indicator -->
<h2 id="turnIndicator" class="turn-indicator">Current Turn: Click The Decide Button</h2> <!-- This line indicates the current turn -->

    <div class="input_form">
        <button id="decideTurnButton" onclick="decideFirstTurn()">Play</button>
        <h2>Submit Your Answers</h2>
        <div class="team_inputs">
            <div class="team_input">
                <h3>Team 1</h3>
                <label for="team1Name">Team Name:</label>
                <input type="text" id="team1Name" placeholder="Enter Team 1's name" required>
                <form id="team1Form" onsubmit="return checkAnswer('team1');">
                    <label for="team1Answer">Answer:</label>
                    <input type="text" id="team1Answer" name="team1Answer" placeholder="Enter Team 1's answer here" required>
                    <button type="submit" id="team1Submit">Submit</button>
                </form>
            </div>
    
            <div class="team_input">
                <h3>Team 2</h3>
                <label for="team2Name">Team Name:</label>
                <input type="text" id="team2Name" placeholder="Enter Team 2's name" required>
                <form id="team2Form" onsubmit="return checkAnswer('team2');">
                    <label for="team2Answer">Answer:</label>
                    <input type="text" id="team2Answer" name="team2Answer" placeholder="Enter Team 2's answer here" required>
                    <button type="submit" id="team2Submit">Submit</button>
                </form>
            </div>
        </div>
        
        <!-- Reset Button -->
        
        <button id="resetButton" onclick="resetGame()">Reset Game</button>
    </div>
    


    <div id="submittedAnswers" class="submitted-answers">
        <h2>Submitted Answers</h2>
        <ul id="answersList">
            <!-- Team answers will be displayed here -->
        </ul>
    </div>

    <script src="script.js"></script> <!-- Link to the external JavaScript file -->
</body>
</html>


-----------------------------------------


/* General styles */
body {
    background-image: url('logo.jpg'); /* Path to your image */
    background-repeat: repeat; /* Tiles the image */
    background-size: auto; /* Keeps the original size of the image */
    background-position: top left; /* Positioning of the background image */
    background-attachment: fixed; /* Background image will be fixed during scrolling */
    font-family: Arial, sans-serif;
}

/* Navigation styles */
.nav.container {
    background-color: #333; /* Background color */
    color: white; /* Text color */
    padding: 20px; /* Padding around the nav */
    text-align: center; /* Center text */
}

.nav.container ul {
    list-style-type: none; /* Remove bullet points */
    padding: 0; /* Remove default padding */
    margin: 0; /* Remove default margin */
    display: flex; /* Use Flexbox for horizontal alignment */
    justify-content: center; /* Center items horizontally */
}

.nav.container ul li {
    margin: 0 15px; /* Space between items */
}

.nav.container ul li a {
    color: white; /* Link color */
    text-decoration: none; /* Remove underline */
    padding: 5px 10px; /* Add padding around links for better click area */
    transition: background-color 0.3s; /* Smooth transition for hover effect */
}

.nav.container ul li a:hover {
    background-color: #555; /* Change background on hover */
    border-radius: 5px; /* Rounded corners on hover */
}

/* Styling for the input form container */
.input_form {
    width: 800px; /* Increased width for side-by-side layout */
    margin: 20px auto;
    background-color: #222;
    padding: 20px;
    border-radius: 10px;
    color: #fff;
}

/* Form headings */
.input_form h2 {
    text-align: center;
}

/* Flex container for team inputs */
.team_inputs {
    display: flex; /* Use flexbox to align items side by side */
    justify-content: space-between; /* Space between team containers */
}

/* Team input styling */
.team_input {
    flex: 1; /* Each team input takes equal space */
    margin: 0 20px; /* Increased margin between the containers */
}

/* Label styling */
.input_form label {
    display: block;
    margin: 10px 0 5px;
    font-size: 16px;
}

/* Input fields styling */
.input_form input[type="text"] {
    width: 100%;
    padding: 10px;
    margin: 5px 0 20px;
    border-radius: 5px;
    border: none;
    font-size: 16px;
}

/* Button styling */
.input_form button {
    width: 100%;
    padding: 10px;
    background-color: #f39c12;
    color: #222;
    border: none;
    border-radius: 5px;
    font-size: 18px;
    cursor: pointer;
}

.input_form button:hover {
    background-color: #e67e22;
}

/* Styling for the game container */
.game_container {
    width: 400px;
    margin: 20px auto;
    background-color: #222;
    border-radius: 10px;
    padding: 20px;
    color: #fff;
}

/* Styling for the list */
.game_container ul {
    list-style-type: none;
    padding: 0;
}

.game_container ul li {
    display: none; /* Hide all choices initially */
    justify-content: space-between;
    align-items: center;
    background-color: #444;
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    font-size: 18px;
    font-weight: bold;
}

/* Styling for answers and points */
.game_container .answer {
    flex-grow: 1;
}

.game_container .points {
    background-color: #f39c12;
    color: #222;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 22px;
}

/* Styling for submitted answers */
.submitted-answers {
    width: 800px; /* Set a width for the submitted answers section */
    margin: 20px auto;
    background-color: #222;
    border-radius: 10px;
    padding: 20px;
    color: #fff;
}

.submitted-answers ul {
    list-style-type: none;
    padding: 0;
}

.submitted-answers li {
    background-color: #444;
    margin: 10px 0;
    padding: 10px;
    border-radius: 5px;
}

/* Adding hover effect */
.game_container ul li:hover {
    background-color: #555;
}

#resetButton
{
    margin-top: 50px;
}

#decideTurnButton
{
    margin-bottom: 15px;
}

.current-turn {
    text-align: center;
    font-size: 1.5em;
    color: #ffffff;
    margin: 20px 0;
}

.turn-indicator {
    background-color: #444; /* Light blue background */
    color: #ffffff; /* Dark text color */
    padding: 10px 20px; /* Padding around the text */
    border-radius: 5px; /* Rounded corners */
    text-align: center; /* Center align the text */
    font-size: 1.5em; /* Increase font size */
    font-weight: bold; /* Make the text bold */
    margin: 20px 0; /* Margin above and below */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow effect */
    width: 50%;
    margin: 20px auto;
}


------------------------------------------


let revealedAnswers = []; // Store revealed answers
let currentTeam; // Track the current team
let submittedAnswers = { team1: [], team2: [] }; // Store submitted answers for each team
let lastTeamToReveal = ''; // Track the last team to reveal an answer
let totalAnswers = 4; // Total number of answers to reveal

function checkAnswer(team) {
    const answerInput = team === 'team1' ? document.getElementById('team1Answer') : document.getElementById('team2Answer');
    const answer = answerInput.value.trim();
    const teamName = team === 'team1' ? document.getElementById('team1Name').value || 'Team 1' : document.getElementById('team2Name').value || 'Team 2';

    // Check if the answer is already revealed
    if (revealedAnswers.includes(answer)) {
        alert('This answer has already been revealed. Please try a different answer.');
        return false;
    }

    // Check if the answer matches any of the choices
    const choiceElements = document.querySelectorAll('#answerList li');
    let matched = false;

    choiceElements.forEach(choice => {
        if (choice.dataset.answer.toLowerCase() === answer.toLowerCase()) {
            // Reveal the answer by updating the display
            choice.style.display = 'block'; // Show the answer
            matched = true;
            revealedAnswers.push(answer); // Add to revealed answers
            submittedAnswers[team].push(answer); // Store the submitted answer

            // Update last team to reveal
            lastTeamToReveal = teamName;

            const answerList = document.getElementById('answersList');
            const answerItem = document.createElement('li');
            answerItem.textContent = `${teamName} submitted: ${answer}`;
            answerList.appendChild(answerItem); // Display the submitted answer
            
            // Check if all answers have been revealed
            if (revealedAnswers.length === totalAnswers) {
                announceWinner(lastTeamToReveal); // Announce winner if all answers are revealed
            }
        }
    });

    if (!matched) {
        alert('Wrong answer! Switching turn...');
        switchTurn(); // Switch turns if the answer is wrong
    }

    answerInput.value = ''; // Clear the input after submission
    return false; // Prevent form submission
}

function switchTurn() {
    // Switch between teams
    currentTeam = currentTeam === 'team1' ? 'team2' : 'team1';
    const team1Name = document.getElementById('team1Name').value || 'Team 1'; // Default name if not provided
    const team2Name = document.getElementById('team2Name').value || 'Team 2'; // Default name if not provided
    const currentTeamName = currentTeam === 'team1' ? team1Name : team2Name;

    document.getElementById('turnIndicator').innerText = `Current Turn: ${currentTeamName}`; // Update turn indicator

    // Enable/disable submit buttons based on the current turn
    document.getElementById('team1Submit').disabled = currentTeam === 'team1' ? false : true;
    document.getElementById('team2Submit').disabled = currentTeam === 'team2' ? false : true;
}

function decideFirstTurn() {
    // Randomly decide which team goes first
    currentTeam = Math.random() < 0.5 ? 'team1' : 'team2'; // Randomly select team
    const team1Name = document.getElementById('team1Name').value || 'Team 1'; // Default name if not provided
    const team2Name = document.getElementById('team2Name').value || 'Team 2'; // Default name if not provided

    // Update the turn indicator with the current team's name
    const currentTeamName = currentTeam === 'team1' ? team1Name : team2Name;
    document.getElementById('turnIndicator').innerText = `Current Turn: ${currentTeamName}`; // Update the turn indicator

    // Enable/disable submit buttons based on the current turn
    document.getElementById('team1Submit').disabled = currentTeam === 'team1' ? false : true;
    document.getElementById('team2Submit').disabled = currentTeam === 'team2' ? false : true;

    // Disable the decide button after the first click
    document.getElementById('decideTurnButton').disabled = true;
}

function resetGame() {
    // Clear team names
    document.getElementById('team1Name').value = '';
    document.getElementById('team2Name').value = '';

    // Clear answer inputs
    document.getElementById('team1Answer').value = '';
    document.getElementById('team2Answer').value = '';

    // Clear revealed answers and submitted answers
    revealedAnswers = [];
    submittedAnswers = { team1: [], team2: [] };
    lastTeamToReveal = ''; // Reset last team to reveal

    // Reset the choices display
    const choiceElements = document.querySelectorAll('#answerList li');
    choiceElements.forEach(choice => {
        choice.style.display = 'none'; // Hide all choices
    });

    // Clear submitted answers list
    const answerList = document.getElementById('answersList');
    answerList.innerHTML = ''; // Clear submitted answers

    // Reset the turn indicator
    currentTeam = ''; // Reset current team
    document.getElementById('turnIndicator').innerText = 'Current Turn: Click the Play Button'; // Set to N/A until decided

    // Re-enable the Decide button
    document.getElementById('decideTurnButton').disabled = false;

    // Re-enable the submit buttons for both teams
    document.getElementById('team1Submit').disabled = false;
    document.getElementById('team2Submit').disabled = false;

    alert('The game has been reset! Ready for a new round.');
}

function announceWinner(winningTeam) {
    alert(`${winningTeam} is the winner! Congratulations!`);
    // Optionally, reset the game after announcing the winner
    resetGame();
}
